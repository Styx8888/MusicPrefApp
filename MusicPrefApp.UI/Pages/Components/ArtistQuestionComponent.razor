@inherits ComponentBase
@using MusicPrefApp.Services.SpotifyApi
@using MusicPrefApp.Application.Questions
@using MusicPrefApp.Services.SpotifyApi.Models
@using MusicPrefApp.UI.State
@using MusicPrefApp.Application.Helpers

<MudSelect T="Artist" @ref="_select" Label="@ArtistsQuestion.Description" Disabled="@(AppState.AnswersModel.SelectedGenres.Count==0)" MultiSelection="true" SelectedValuesChanged="SelectedValuesChanged"> 
        @foreach (var artist in Options)
            {
        <MudSelectItem T="Artist" Value="@artist">@artist.name genre: @artist.genres[0]</MudSelectItem>
            }
    </MudSelect>

@code {
    [Inject] public AppState AppState { get; set; }

    [Inject] public ISpotifyApi SpotifyApi { get; set; }

    public ArtistsQuestion ArtistsQuestion { get; set; }

    protected List<Artist> Options { get; set; } = new();

    protected List<string> ActuallySelectedGenres = new();

    protected override void OnInitialized()
    {
        AppState.OnGenreChanged += () => InvokeAsync(StateHasChanged);
        AppState.OnClear += () => InvokeAsync(Clear);

        ArtistsQuestion = new ArtistsQuestion(SpotifyApi);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!ActuallySelectedGenres.SequenceEqual(AppState.AnswersModel.SelectedGenres))
        {
            Options = await ArtistsQuestion.GetOptions<List<Artist>>(AppState.AnswersModel.SelectedGenres);
            Options = Options.OrderByDescending(x => x.popularity).DistinctBy(a => a.name).ToList();
            ActuallySelectedGenres = AppState.AnswersModel.SelectedGenres;
        }
    }

    private void SelectedValuesChanged(IEnumerable<Artist> artists)
    {
        AppState.SetArtists(artists.ToList());
    }

    public void Dispose()
    {
        AppState.OnGenreChanged -= StateHasChanged;
        AppState.OnClear -= Clear;
    }

    private MudSelect<Artist> _select;

    private void Clear()
    {
        _select.Clear();
        StateHasChanged();
    }
}